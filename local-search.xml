<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>社区项目-JWT全局过滤器</title>
    <link href="/2024/05/27/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-JWT%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2024/05/27/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-JWT%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\ywh\AppData\Roaming\Typora\typora-user-images\image-20240527160337933.png" alt="image-20240527160337933"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1.如果是登录请求,直接放行,用户登录</p><p>2.如果不是登录请求,检测是否有token,若有,则验证token是否有效,若没有,则请求失败</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>功能实现位置:在gateway网关中,创建一个AuthorizeFilter类</p><p>实现: Ordered, GlobalFilter接口</p><p>方法:filter-&gt;过滤方法,getOrder-&gt;优先级设置,值越小优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.app.gateway.filter;<br><br><br><span class="hljs-keyword">import</span> com.heima.app.gateway.util.AppJwtUtil;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ordered</span>, GlobalFilter &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">//1.获取信息</span><br>        <span class="hljs-comment">// request:</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         getMethod()：获取HTTP方法。</span><br><span class="hljs-comment">         getURI()：获取请求的URI。</span><br><span class="hljs-comment">         headers()：获取请求头。</span><br><span class="hljs-comment">         cookies()：获取请求中的cookie。</span><br><span class="hljs-comment">         body()：获取请求体的发布者（Publisher），可以通过它读取请求体数据。</span><br><span class="hljs-comment">         queryParams()：获取请求URI中的查询参数。</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-comment">// response:</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        状态码：你可以设置HTTP状态码，如200 OK、404 Not Found等。</span><br><span class="hljs-comment">        响应头：响应头包含诸如Content-Type、Content-Length、Cache-Control等键值对。你可以使用getHeaders()方法获取或设置这些头信息。</span><br><span class="hljs-comment">        响应体：响应体是实际发送给客户端的数据。在WebFlux中，这通常是一个Flux&lt;DataBuffer&gt;或Mono&lt;DataBuffer&gt;，代表响应流中的数据。你可以使用writeWith()或writeAndFlushWith()方法设置响应体。</span><br><span class="hljs-comment">        其他属性：ServerHttpResponse 还可能包含其他与HTTP响应相关的属性和功能，但这些通常不如上面提到的那些常用。</span><br><span class="hljs-comment">        编码：虽然ServerHttpResponse本身不直接处理字符编码，但你可以通过响应头（如Content-Type）中的charset参数来指示响应体的编码方式。</span><br><span class="hljs-comment">        刷新和关闭：在某些情况下，你可能需要显式地刷新或关闭响应。这通常不是必要的，因为Spring WebFlux会在适当的时候为你处理这些。但是，在某些特殊场景下（如使用ServerSentEvent或WebSocket时），你可能需要更细粒度的控制。</span><br><span class="hljs-comment">        Cookie：虽然ServerHttpResponse本身不直接提供设置Cookie的方法，但你可以通过响应头中的Set-Cookie字段来设置Cookie。</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br><br>        <span class="hljs-comment">//登录接口</span><br>        <span class="hljs-keyword">if</span> (request.getURI().getPath().contains(<span class="hljs-string">&quot;/login&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br><br>        <span class="hljs-comment">//获取token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeaders().getFirst(<span class="hljs-string">&quot;token&quot;</span>);<br><br>        <span class="hljs-comment">//token为空</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(token))&#123;<br>            <span class="hljs-comment">//将错误信息变更为401</span><br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-comment">//结束,并返回</span><br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//判断token是否有效</span><br>        <span class="hljs-comment">//拿到claimsBody - 可以解析当前信息</span><br>        <span class="hljs-comment">//有可能解析失败</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claimsBody</span> <span class="hljs-operator">=</span> AppJwtUtil.getClaimsBody(token);<br>            <span class="hljs-comment">//是否是过期</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> AppJwtUtil.verifyToken(claimsBody);<br>            <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span> || result == <span class="hljs-number">2</span>)&#123;<br>                response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>                <span class="hljs-keyword">return</span> response.setComplete();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//放行</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>社区项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社区项目-nginx</title>
    <link href="/2024/05/27/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-nginx/"/>
    <url>/2024/05/27/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-nginx/</url>
    
    <content type="html"><![CDATA[<h4 id="1-将nginx项目架构添加到文件"><a href="#1-将nginx项目架构添加到文件" class="headerlink" title="1.将nginx项目架构添加到文件"></a>1.将nginx项目架构添加到文件</h4><h4 id="2-准备好前端项目app-web-有一个index-html-主入口"><a href="#2-准备好前端项目app-web-有一个index-html-主入口" class="headerlink" title="2.准备好前端项目app-web,有一个index.html,主入口"></a>2.准备好前端项目app-web,有一个index.html,主入口</h4><h4 id="3-配置nginx-conf文件"><a href="#3-配置nginx-conf文件" class="headerlink" title="3.配置nginx.conf文件"></a>3.配置nginx.conf文件</h4><ul><li>反向代理设置 - 找到后台</li><li>静态资源配置 - 找到前端</li></ul><p>​*在nginx安装的conf目录下新建一个文件夹<code>leadnews.conf</code>,在当前文件夹中新建<code>heima-leadnews-app.conf</code>文件</p><p>​在conf文件中写配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 反向代理,找到网关</span><br><span class="hljs-section">upstream</span>  heima-app-gateway&#123;<br>    <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">51601</span>;<br>&#125;<br><br><span class="hljs-comment"># 访问静态资源</span><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8801</span>;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">root</span> C:/Users/ywh/Desktop/Programs/app-web/;<br><span class="hljs-attribute">index</span> index.html;<br>&#125;<br><br><span class="hljs-section">location</span> ~/app/(.*) &#123;<br><span class="hljs-attribute">proxy_pass</span> http://heima-app-gateway/<span class="hljs-variable">$1</span>;<br><span class="hljs-attribute">proxy_set_header</span> HOST <span class="hljs-variable">$host</span>;  <span class="hljs-comment"># 不改变源请求头的值</span><br><span class="hljs-attribute">proxy_pass_request_body</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment">#开启获取请求体</span><br><span class="hljs-attribute">proxy_pass_request_headers</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment">#开启获取请求头</span><br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;   <span class="hljs-comment"># 记录真实发出请求的客户端IP</span><br><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;  <span class="hljs-comment">#记录代理信息</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>*在nginx.conf中编写配置,引入上面的conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><span class="hljs-comment"># 引入自定义配置文件</span><br><span class="hljs-attribute">include</span> leadnews.conf/<span class="hljs-regexp">*.conf</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-重新加载nginx"><a href="#4-重新加载nginx" class="headerlink" title="4.重新加载nginx"></a>4.重新加载nginx</h4><p>​进入nginx主目录,打开cmd,输入nginx -s reload</p><h4 id="5-启动nginx"><a href="#5-启动nginx" class="headerlink" title="5.启动nginx"></a>5.启动nginx</h4><p>​进入nginx主目录,打开cmd,输入nginx</p><h4 id="6-打开前端"><a href="#6-打开前端" class="headerlink" title="6.打开前端"></a>6.打开前端</h4>]]></content>
    
    
    
    <tags>
      
      <tag>社区项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo创建文章流程</title>
    <link href="/2024/05/27/Hexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/05/27/Hexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>进入blog根目录,打开cmd</p><p>1.npx hexo new “文章标题”</p><p>2.hexo g &amp;&amp; hexo d</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM虚拟机-1-初始</title>
    <link href="/2024/05/21/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA-1-%E5%88%9D%E5%A7%8B/"/>
    <url>/2024/05/21/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA-1-%E5%88%9D%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="JVM虚拟机"><a href="#JVM虚拟机" class="headerlink" title="JVM虚拟机"></a>JVM虚拟机</h4><p>java virtual machine</p><p><strong>构成</strong>:类加载器,运行时数据区,垃圾回收器…</p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统的特征发展,中断</title>
    <link href="/2024/05/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81%E5%8F%91%E5%B1%95-%E4%B8%AD%E6%96%AD/"/>
    <url>/2024/05/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81%E5%8F%91%E5%B1%95-%E4%B8%AD%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h4 id="操作系统特征-四大特征"><a href="#操作系统特征-四大特征" class="headerlink" title="操作系统特征 - 四大特征"></a>操作系统特征 - 四大特征</h4><p>并发,共享,虚拟,异步</p><p><strong>并发</strong>:多个事务在一个时间段内,宏观上同时运行,微观上交替运行</p><p><strong>共享</strong>:系统中的资源可供内存多个并发执行的进程共同使用</p><p>分为:互斥共享(一个进程霸占使用)&#x2F;同时共享(多个进程交替使用)</p><p><strong>虚拟</strong>:把物理上的实体变为逻辑上的对应物</p><p>虚拟技术:空分复用技术(虚拟存储技术),时分复用技术(虚拟处理器)等</p><p><strong>异步</strong>:多道程序环境,由于资源有限,某个进程可能会等待资源释放再运行,称为异步</p><h4 id="操作系统的发展"><a href="#操作系统的发展" class="headerlink" title="操作系统的发展"></a>操作系统的发展</h4><h5 id="1-手工操作阶段"><a href="#1-手工操作阶段" class="headerlink" title="1.手工操作阶段"></a>1.手工操作阶段</h5><p><img src="/myimg/image-20240521175008727.png" alt="image-20240521175008727"></p><h5 id="2-单道批处理"><a href="#2-单道批处理" class="headerlink" title="2.单道批处理"></a>2.单道批处理</h5><p><img src="/myimg/image-20240521175403207.png" alt="image-20240521175403207"></p><p>将多个作业写入磁带,脱机输入</p><p><img src="/myimg/image-20240521175418817.png" alt="image-20240521175418817"></p><p>单个作业仍然独占计算机</p><h5 id="3-多道批处理"><a href="#3-多道批处理" class="headerlink" title="3.多道批处理"></a>3.多道批处理</h5><p><img src="/myimg/image-20240521175607890.png" alt="image-20240521175607890"></p><p>优点:多道程序并发执行,资源利用率大幅提升,如:在cpu计算时,可以同时进行读写操作</p><p>缺点:用户提交作业,用户就无法操作作业,只能等待计算机运行结束</p><h5 id="4-分时操作系统"><a href="#4-分时操作系统" class="headerlink" title="4.分时操作系统"></a>4.分时操作系统</h5><p><img src="/myimg/image-20240521175902023.png" alt="image-20240521175902023"></p><p>优点:多个用户轮流使用计算机资源,用户请求可以立即被响应,解决了人机交互问题</p><p>缺点:不能优先处理紧急作业,只能按时间轮询</p><h5 id="5-实时操作系统"><a href="#5-实时操作系统" class="headerlink" title="5.实时操作系统"></a>5.实时操作系统</h5><p>优点:能够响应一些紧急任务,可以有严格的时间限制</p><h5 id="6-网络操作系统-分布式操作系统-个人计算机操作系统…"><a href="#6-网络操作系统-分布式操作系统-个人计算机操作系统…" class="headerlink" title="6.网络操作系统,分布式操作系统,个人计算机操作系统…"></a>6.网络操作系统,分布式操作系统,个人计算机操作系统…</h5><h4 id="操作系统运行机制"><a href="#操作系统运行机制" class="headerlink" title="操作系统运行机制"></a>操作系统运行机制</h4><p><strong>内核态</strong>,内核程序:kernel,可以执行特权指令,接近硬件</p><p><strong>用户态</strong>,应用程序:只能使用非特权指令,接近用户</p><p>cpu有一个寄存器 <strong>程序状态寄存器</strong>(psw) ,标志cpu处于哪种状态</p><p><strong>运行流程</strong>:</p><p>1.刚开机处于 内核态 ,操作系统运行<strong>内核</strong>程序</p><p>2.当用户启动一个应用程序,内核程序让出cpu,psw切换为用户态</p><p>如果在<strong>用户态运行特权指令</strong></p><p>3.发生 <strong>中断信号</strong>,cpu直接转为内核态</p><p>4.处理中断,再分配cpu</p><h4 id="中断-异常"><a href="#中断-异常" class="headerlink" title="中断&amp;异常"></a>中断&amp;异常</h4><p><strong>中断向量表</strong>,找到相应类型的中断处理程序</p><h5 id="中断"><a href="#中断" class="headerlink" title="中断:"></a><strong>中断</strong>:</h5><p>中断是让 操作系统 内核重新夺回cpu运行权的<strong>唯一途径</strong></p><p>1.<strong>内中断</strong>:中断信号来源于cpu内部</p><p>如:用户态执行特权处理,除数为0…<strong>非法指令</strong>,会直接产生内中断</p><p>如:应用程序<strong>主动请求</strong>(调用系统资源)操作系统<strong>内核服务</strong>(陷入指令),也会产生内中断</p><p>2.<strong>外中断</strong>:</p><p>如:时钟中断,时钟部件<strong>控制</strong>各个进程的<strong>运行时间</strong>,会按照固定时间发出中断信号</p><p>如:系统资源(打印机等),处理<strong>IO中断的内核程序</strong>,在输入输出任务完成时,向cpu发送中断信号</p><h5 id="异常-指内中断"><a href="#异常-指内中断" class="headerlink" title="异常:指内中断"></a>异常:指内中断</h5><p>陷入,故障,终止</p><p><strong>陷入</strong>:应用程序故意引发</p><p><strong>故障</strong>:可被内核程序修复,cpu修复后仍然会给应用程序使用权</p><p><strong>终止</strong>:致命错误,内核程序无法修复,不会再给使用权</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社区项目-day01</title>
    <link href="/2024/05/21/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-day01/"/>
    <url>/2024/05/21/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-day01/</url>
    
    <content type="html"><![CDATA[<h3 id="核心界面"><a href="#核心界面" class="headerlink" title="核心界面:"></a>核心界面:</h3><h5 id="1-前台文章展示-普通用户"><a href="#1-前台文章展示-普通用户" class="headerlink" title="1.前台文章展示 - 普通用户"></a>1.前台文章展示 - 普通用户</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">基于安卓<span class="hljs-keyword">app</span> - 后改微信小程序<br></code></pre></td></tr></table></figure><h5 id="2-后台文章管理-自媒体博主"><a href="#2-后台文章管理-自媒体博主" class="headerlink" title="2.后台文章管理 - 自媒体博主"></a>2.后台文章管理 - 自媒体博主</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">基于vue网页<br></code></pre></td></tr></table></figure><h5 id="3-后台超级管理员-项目维护人员"><a href="#3-后台超级管理员-项目维护人员" class="headerlink" title="3.后台超级管理员 - 项目维护人员"></a>3.后台超级管理员 - 项目维护人员</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">基于vue网页<br></code></pre></td></tr></table></figure><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构:"></a>微服务架构:</h3><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型:"></a>技术选型:</h3><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计:"></a>数据库设计:</h3>]]></content>
    
    
    
    <tags>
      
      <tag>社区项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/21/hello-world/"/>
    <url>/2024/05/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
