<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java虚拟机知识</title>
    <link href="/2024/05/30/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/05/30/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机的类加载机制"><a href="#虚拟机的类加载机制" class="headerlink" title="虚拟机的类加载机制"></a>虚拟机的类加载机制</h1><h2 id="1-简述java类的加载机制"><a href="#1-简述java类的加载机制" class="headerlink" title="1.简述java类的加载机制?"></a>1.简述java类的加载机制?</h2><ul><li>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的java类型。</li></ul><h2 id="2-类的加载机制与过程"><a href="#2-类的加载机制与过程" class="headerlink" title="2.类的加载机制与过程?"></a>2.类的加载机制与过程?</h2><p>加载-&gt;连接-&gt;初始化,其中连接包含三个步骤:验证,准备,解析</p><p>1.加载</p><ul><li>加载指的是将类的class文件读入到<strong>内存</strong>，并将这些静态数据转换成<strong>方法区</strong>中的运行时数据结构，并在<strong>堆</strong>中生成一个代表这个类的java.lang.<strong>Class对象</strong>，作为方法区类数据的<strong>访问入口</strong></li></ul><p>2.连接</p><p>当类被加载之后，系统为之生成一个对应的Class对象，接着将会进入连接阶段，连接阶段负责把类的二进制数据合并到JRE中</p><p>分为三个步骤:<strong>验证-&gt;准备-&gt;解析</strong></p><ul><li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题。主要验证是否符合Class文件格式规范，并且是否能被当前的虚拟机加载处理。</li><li>准备：正式为类变量（static变量）分配内存并设置类变量<strong>初始值</strong>(全部设为0)的阶段，这些内存都将在方法区中进行分配</li><li>解析：虚拟机常量池的<strong>符号引用替换为字节引用</strong>过程</li></ul><p>3.初始化</p><ul><li><p>初始化阶段是执行类构造器<code>&lt;clinit&gt;</code>() 方法的过程,这一步 JVM 才开始真正执行类中定义的 Java 程序代码</p></li><li><p>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</p></li></ul><h2 id="3-什么是类加载器，类加载器有哪些"><a href="#3-什么是类加载器，类加载器有哪些" class="headerlink" title="3.什么是类加载器，类加载器有哪些?"></a>3.什么是类加载器，类加载器有哪些?</h2><p>1.<strong>类加载器</strong>的主要作用就是加载 Java 类的字节码（ <code>.class</code> 文件）到 JVM 中（在内存中生成一个代表该类的 <code>Class</code> 对象）</p><p>2.有两类,<strong>一是</strong>j<strong>ava代码实现</strong>的,JDK默认或者自定义的加载器,这些加载器都必须继承自抽象类ClassLoader</p><p><strong>二是jvm虚拟机实现</strong>的,用的是虚拟机底层语言<strong>c或c++</strong>,保证基础类被正确加载,如:String类的加载</p><p>3.JDK8以及8以后,类加载器差别巨大</p><p><img src="/%5Cmyimg%5Cjvm%E8%99%9A%E6%8B%9F%E6%9C%BA%5C1717061150520.jpg" alt="1717061150520"></p><p><strong>启动类加载器</strong>:加载java核心类,主要加载jre&#x2F;lib&#x2F;rt.jar包中的类(还有其他基础类),(rt&#x3D;runtime,运行时的类,java.lang.xx,java.util.xx都在里面),也可以让启动类加载器加载用户定义的类-&gt;被 <code>-Xbootclasspath</code>参数指定的路径下的所有类</p><p><strong>扩展类加载器</strong>:非核心java类,jre&#x2F;lib&#x2F;ext下的类文件</p><p><strong>应用程序加载器</strong>:用户创建的类,classpath下的类文件</p><p><strong>自定义加载器</strong>:….</p><h2 id="4-双亲委派机制是什么"><a href="#4-双亲委派机制是什么" class="headerlink" title="4.双亲委派机制是什么?"></a>4.双亲委派机制是什么?</h2><h5 id="主Q"><a href="#主Q" class="headerlink" title="主Q"></a>主Q</h5><p>双亲委派机制的核心是解决一个类,到底<strong>由谁加载</strong>的问题</p><p>作用:1.保证类的<strong>安全加载</strong>,通过双亲委派机制,避免恶意的代码替换JDK核心类库,比如:确保java.lang.String,的完整性和安全性2.<strong>避免重复加载</strong></p><p>机制:当一个类加载器,接收到加载类任务时,会<strong>自底向上查找是否加载过</strong>,再<strong>自顶向下尝试进行加载</strong>(这里的父类指的是上下级,而不是继承关系)</p><p>Application 的父类是 Extension , Extension 的父类是 Bootstrap</p><h5 id="小Q-一个类重复出现在三个类加载器目录下-由谁加载"><a href="#小Q-一个类重复出现在三个类加载器目录下-由谁加载" class="headerlink" title="小Q:一个类重复出现在三个类加载器目录下,由谁加载?"></a>小Q:一个类重复出现在三个类加载器目录下,由谁加载?</h5><p>由Bootstrap加载,双亲委派机制会将类从Application -&gt;  Extension -&gt; Bootstrap 询问是否加载,直到最后都未被加载,然后从Bootstrap 开始尝试加载,发现加载成功,退出加载,返回对象</p><h5 id="小Q-String类会被覆盖吗-自己创建一个String类-会被加载吗"><a href="#小Q-String类会被覆盖吗-自己创建一个String类-会被加载吗" class="headerlink" title="小Q:String类会被覆盖吗,自己创建一个String类,会被加载吗?"></a>小Q:String类会被覆盖吗,自己创建一个String类,会被加载吗?</h5><p>不会,双亲委派机制会将类从Application -&gt;  Extension -&gt; Bootstrap 询问是否加载,直到最后都未被加载,然后从Bootstrap 开始尝试加载,发现加载String成功,退出加载,返回对象因此永远不可能加载到自定义的String类</p><h5 id="小Q-如何使用java代码主动加载一个类"><a href="#小Q-如何使用java代码主动加载一个类" class="headerlink" title="小Q:如何使用java代码主动加载一个类?"></a>小Q:如何使用java代码主动加载一个类?</h5><p>1.Class.forName,用当前类加载器加载类</p><p>2.获取到类加载器,通过类加载器的loadClass方法指定某个类加载器进行加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取main方法所在类的类加载器,(应用程序加载器)</span><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Demo1.class.getClassLoader();<br>System.out.println(classLoader);<br><br><span class="hljs-comment">//使用获取到的加载器加载com.heima.A</span><br>Class&lt;?&gt; clazz = classLoader.loadClass(<span class="hljs-string">&quot;com.heima.A&quot;</span>);<br>System.out.println(clazz.getClassLoader);<br></code></pre></td></tr></table></figure><h2 id="5-怎么打破双亲委派机制"><a href="#5-怎么打破双亲委派机制" class="headerlink" title="5.怎么打破双亲委派机制?"></a>5.怎么打破双亲委派机制?</h2><p>三种方式,1.自定义类加载器,2.线程上下文加载器,3.Osgi框架的类加载器</p><p><img src="/%5Cmyimg%5Cjvm%E8%99%9A%E6%8B%9F%E6%9C%BA%5C1717064258092.png" alt="1717064258092"></p><p>自定义加载器:跳过loadClass,findClass方法,直接获取二进制数据,再调用defineClass存入虚拟机内存中</p><p>如:Tomcat</p><p>2.线程上下文加载器 如JDBC -&gt; 但是没有重写loadclass方法,故我认为没有打破双亲委派机制</p><p><img src="/%5Cmyimg%5Cjvm%E8%99%9A%E6%8B%9F%E6%9C%BA%5C1717065950208.png" alt="1717065950208"></p><p>3.Osgi框架的类加载器,存在<strong>同级之间</strong>的类加载器的委托加载,可以解决热部署的问题(即不停止服务部署),使用阿里arthas</p><h5 id="小Q-JDK9以后的类加载器"><a href="#小Q-JDK9以后的类加载器" class="headerlink" title="小Q:JDK9以后的类加载器?"></a>小Q:JDK9以后的类加载器?</h5><p>JDK8的扩展类加载器,应用程序加载器源码位于rt.jar包中</p><p><strong>JDK9之后</strong>,引入了module概念,类加载器在设计上发生很大变化,将类不在放置于jar包内,而是放在jmods里,是一个个xx.jmod文件</p><p>1.启动类加载器由<strong>java</strong>编写,变成了BootClassLoader继承自BuiltinClassLoader实现从模块中找到加载字节码文件,java仍然拿不到启动类加载器</p><p>2.扩展类加载器替换为平台加载器,Platform Class Loader,也是继承自BuiltinClassLoader实现从模块中找到加载字节码文件(不在继承UrlClassLoader…了),平台加载器的存在更多是为了与老版本设计方式兼容,本身没有特殊逻辑</p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM java虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社区项目-freemarker</title>
    <link href="/2024/05/28/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-freemarker/"/>
    <url>/2024/05/28/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-freemarker/</url>
    
    <content type="html"><![CDATA[<h3 id="通过Freemarker模板技术生成静态的HTML页面"><a href="#通过Freemarker模板技术生成静态的HTML页面" class="headerlink" title="通过Freemarker模板技术生成静态的HTML页面"></a>通过Freemarker模板技术生成静态的HTML页面</h3><p>文章内容 -&gt; freemarker(生成HTML页面) -&gt; minIO(分布式文件系统) -&gt; 将静态资源地址url存入article表 -&gt; 文章展示(根据url访问minIO中的静态资源)</p><p>template + java object -&gt; freemarker &#x3D; HTML</p><p>模板中有待存标识${name}…,通过java对象进行填充,形成html</p><h3 id="搭建-快速入门"><a href="#搭建-快速入门" class="headerlink" title="搭建&amp;快速入门"></a>搭建&amp;快速入门</h3><p>1.创建freemarker-demo测试工程</p><p>pom.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--依赖项--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- lombok --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- apache 对 java io 的封装工具库 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8881</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-freemarker</span><br>  <span class="hljs-attr">freemarker:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">settings:</span><br>      <span class="hljs-attr">template_update_delay:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.ftl</span>  <span class="hljs-comment"># 指定模板后缀名</span><br></code></pre></td></tr></table></figure><p>3.在resouces下创建templates,此目录为freemarker默认<strong>存放目录</strong></p><p>在templates下创建01-basic.ftl,模板中的<strong>插值表达式</strong>会被freemarker替换为具体的数据</p><p>01-basic.ftl:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>普通文本 String 展示：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>Hello $&#123;name&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>对象Student中的数据展示：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>姓名：$&#123;stu.name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>年龄：$&#123;stu.age&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.准备实体</p><p>student:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.freemarker.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">private</span> Date birthday;<span class="hljs-comment">//生日</span><br>    <span class="hljs-keyword">private</span> Float money;<span class="hljs-comment">//钱包</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5.创建测试用的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.test.freemarker.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/basic&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(Model model)</span> &#123;<br><br><br>        <span class="hljs-comment">//1.纯文本形式的参数</span><br>        <span class="hljs-comment">//给模板的name赋值</span><br>        model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;freemarker&quot;</span>);<br>        <span class="hljs-comment">//2.实体类相关的参数</span><br>        <span class="hljs-comment">//给模板的stu赋值</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;小明&quot;</span>);<br>        student.setAge(<span class="hljs-number">18</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;stu&quot;</span>, student);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;01-basic&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.访问localhost:8881&#x2F;basic</p><h3 id="Freemarker语法"><a href="#Freemarker语法" class="headerlink" title="Freemarker语法"></a>Freemarker语法</h3><h4 id="基础语法种类"><a href="#基础语法种类" class="headerlink" title="基础语法种类"></a>基础语法种类</h4><p>  1、注释，即&lt;#–  –&gt;，介于其之间的内容会被freemarker忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;#--我是一个freemarker注释--&gt;<br></code></pre></td></tr></table></figure><p>  2、插值（Interpolation）：即 <strong><code>$&#123;..&#125;</code></strong> 部分,freemarker会用<strong>真实的值</strong>代替**<code>$&#123;..&#125;</code>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs velocity">Hello $&#123;name&#125;<br></code></pre></td></tr></table></figure><p>  3、FTL指令：和HTML标记类似，名字前加#予以区分，Freemarker会解析标签中的表达式或逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;# &gt;FTL指令&lt;/#&gt; <br></code></pre></td></tr></table></figure><p>  4、文本，仅文本信息，这些不是freemarker的注释、插值、FTL指令的内容会被freemarker忽略解析，直接输出内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;#--freemarker中的普通文本--&gt;<br>我是一个普通的文本<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="生成HTML文件"><a href="#生成HTML文件" class="headerlink" title="生成HTML文件"></a>生成HTML文件</h3><p>1.创建test文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.freemarker.test;<br><br><span class="hljs-keyword">import</span> com.heima.freemarker.FreemarkerApplication;<br><span class="hljs-keyword">import</span> com.heima.freemarker.entity.Student;<br><span class="hljs-keyword">import</span> freemarker.template.Configuration;<br><span class="hljs-keyword">import</span> freemarker.template.Template;<br><span class="hljs-keyword">import</span> freemarker.template.TemplateException;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest(classes = FreemarkerApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FreemarkerTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TemplateException &#123;<br>        <span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> configuration.getTemplate(<span class="hljs-string">&quot;01-basic.ftl&quot;</span>);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 合成方法</span><br><span class="hljs-comment">         * 两个参数 1.模型数据 2.输出流</span><br><span class="hljs-comment">         */</span><br>        template.process(get(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;d:/list.html&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Map <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;freemarker&quot;</span>);<br>        <span class="hljs-comment">//2.实体类相关的参数</span><br>        <span class="hljs-comment">//给stu赋值</span><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;小明&quot;</span>);<br>        student.setAge(<span class="hljs-number">18</span>);<br>        map.put(<span class="hljs-string">&quot;stu&quot;</span>, student);<br><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>社区项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社区项目-minIO</title>
    <link href="/2024/05/28/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-minIO/"/>
    <url>/2024/05/28/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-minIO/</url>
    
    <content type="html"><![CDATA[<p>分布式文件存储系统</p><h4 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h4><p>我们提供的镜像中已经有minio的环境</p><p>我们可以使用docker进行环境部署和启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">docker</span> <span class="hljs-string">run</span> <span class="hljs-string">-p</span> <span class="hljs-number">9000</span><span class="hljs-string">:9000</span> <span class="hljs-string">--name</span> <span class="hljs-string">minio</span> <span class="hljs-string">-d</span> <span class="hljs-string">--restart=always</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;MINIO_ACCESS_KEY=minio&quot;</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;MINIO_SECRET_KEY=minio123&quot;</span> <span class="hljs-string">-v</span> <span class="hljs-string">/home/data:/data</span> <span class="hljs-string">-v</span> <span class="hljs-string">/home/config:/root/.minio</span> <span class="hljs-string">minio/minio</span> <span class="hljs-string">server</span> <span class="hljs-string">/data</span><br></code></pre></td></tr></table></figure><h4 id="管理控制台"><a href="#管理控制台" class="headerlink" title="管理控制台"></a>管理控制台</h4><p>假设我们的服务器地址为<a href="http://192.168.200.130:9000，我们在地址栏输入：http://http://192.168.200.130:9000/">http://192.168.200.130:9000，我们在地址栏输入：http://http://192.168.200.130:9000/</a> 即可进入登录界面</p><h3 id="封装MinIO为starter"><a href="#封装MinIO为starter" class="headerlink" title="封装MinIO为starter"></a>封装MinIO为starter</h3><p>创建file-starter文件,在service层写minio的操作,然后在别的微服务项目导入starter,那么这个微服务就可以使用minio操作(@Autoware注入service层)</p>]]></content>
    
    
    
    <tags>
      
      <tag>社区项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社区项目-JWT全局过滤器</title>
    <link href="/2024/05/27/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-JWT%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2024/05/27/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-JWT%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\ywh\AppData\Roaming\Typora\typora-user-images\image-20240527160337933.png" alt="image-20240527160337933"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1.如果是登录请求,直接放行,用户登录</p><p>2.如果不是登录请求,检测是否有token,若有,则验证token是否有效,若没有,则请求失败</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>功能实现位置:在gateway网关中,创建一个AuthorizeFilter类</p><p>实现: Ordered, GlobalFilter接口</p><p>方法:filter-&gt;过滤方法,getOrder-&gt;优先级设置,值越小优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.app.gateway.filter;<br><br><br><span class="hljs-keyword">import</span> com.heima.app.gateway.util.AppJwtUtil;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ordered</span>, GlobalFilter &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">//1.获取信息</span><br>        <span class="hljs-comment">// request:</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         getMethod()：获取HTTP方法。</span><br><span class="hljs-comment">         getURI()：获取请求的URI。</span><br><span class="hljs-comment">         headers()：获取请求头。</span><br><span class="hljs-comment">         cookies()：获取请求中的cookie。</span><br><span class="hljs-comment">         body()：获取请求体的发布者（Publisher），可以通过它读取请求体数据。</span><br><span class="hljs-comment">         queryParams()：获取请求URI中的查询参数。</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-comment">// response:</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        状态码：你可以设置HTTP状态码，如200 OK、404 Not Found等。</span><br><span class="hljs-comment">        响应头：响应头包含诸如Content-Type、Content-Length、Cache-Control等键值对。你可以使用getHeaders()方法获取或设置这些头信息。</span><br><span class="hljs-comment">        响应体：响应体是实际发送给客户端的数据。在WebFlux中，这通常是一个Flux&lt;DataBuffer&gt;或Mono&lt;DataBuffer&gt;，代表响应流中的数据。你可以使用writeWith()或writeAndFlushWith()方法设置响应体。</span><br><span class="hljs-comment">        其他属性：ServerHttpResponse 还可能包含其他与HTTP响应相关的属性和功能，但这些通常不如上面提到的那些常用。</span><br><span class="hljs-comment">        编码：虽然ServerHttpResponse本身不直接处理字符编码，但你可以通过响应头（如Content-Type）中的charset参数来指示响应体的编码方式。</span><br><span class="hljs-comment">        刷新和关闭：在某些情况下，你可能需要显式地刷新或关闭响应。这通常不是必要的，因为Spring WebFlux会在适当的时候为你处理这些。但是，在某些特殊场景下（如使用ServerSentEvent或WebSocket时），你可能需要更细粒度的控制。</span><br><span class="hljs-comment">        Cookie：虽然ServerHttpResponse本身不直接提供设置Cookie的方法，但你可以通过响应头中的Set-Cookie字段来设置Cookie。</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br><br>        <span class="hljs-comment">//登录接口</span><br>        <span class="hljs-keyword">if</span> (request.getURI().getPath().contains(<span class="hljs-string">&quot;/login&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br><br>        <span class="hljs-comment">//获取token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeaders().getFirst(<span class="hljs-string">&quot;token&quot;</span>);<br><br>        <span class="hljs-comment">//token为空</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(token))&#123;<br>            <span class="hljs-comment">//将错误信息变更为401</span><br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-comment">//结束,并返回</span><br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//判断token是否有效</span><br>        <span class="hljs-comment">//拿到claimsBody - 可以解析当前信息</span><br>        <span class="hljs-comment">//有可能解析失败</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claimsBody</span> <span class="hljs-operator">=</span> AppJwtUtil.getClaimsBody(token);<br>            <span class="hljs-comment">//是否是过期</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> AppJwtUtil.verifyToken(claimsBody);<br>            <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span> || result == <span class="hljs-number">2</span>)&#123;<br>                response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>                <span class="hljs-keyword">return</span> response.setComplete();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//放行</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>社区项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社区项目-nginx</title>
    <link href="/2024/05/27/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-nginx/"/>
    <url>/2024/05/27/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-nginx/</url>
    
    <content type="html"><![CDATA[<h4 id="1-将nginx项目架构添加到文件"><a href="#1-将nginx项目架构添加到文件" class="headerlink" title="1.将nginx项目架构添加到文件"></a>1.将nginx项目架构添加到文件</h4><h4 id="2-准备好前端项目app-web-有一个index-html-主入口"><a href="#2-准备好前端项目app-web-有一个index-html-主入口" class="headerlink" title="2.准备好前端项目app-web,有一个index.html,主入口"></a>2.准备好前端项目app-web,有一个index.html,主入口</h4><h4 id="3-配置nginx-conf文件"><a href="#3-配置nginx-conf文件" class="headerlink" title="3.配置nginx.conf文件"></a>3.配置nginx.conf文件</h4><ul><li>反向代理设置 - 找到后台</li><li>静态资源配置 - 找到前端</li></ul><p>​*在nginx安装的conf目录下新建一个文件夹<code>leadnews.conf</code>,在当前文件夹中新建<code>heima-leadnews-app.conf</code>文件</p><p>​在conf文件中写配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 反向代理,找到网关</span><br><span class="hljs-section">upstream</span>  heima-app-gateway&#123;<br>    <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">51601</span>;<br>&#125;<br><br><span class="hljs-comment"># 访问静态资源</span><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8801</span>;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">root</span> C:/Users/ywh/Desktop/Programs/app-web/;<br><span class="hljs-attribute">index</span> index.html;<br>&#125;<br><br><span class="hljs-section">location</span> ~/app/(.*) &#123;<br><span class="hljs-attribute">proxy_pass</span> http://heima-app-gateway/<span class="hljs-variable">$1</span>;<br><span class="hljs-attribute">proxy_set_header</span> HOST <span class="hljs-variable">$host</span>;  <span class="hljs-comment"># 不改变源请求头的值</span><br><span class="hljs-attribute">proxy_pass_request_body</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment">#开启获取请求体</span><br><span class="hljs-attribute">proxy_pass_request_headers</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment">#开启获取请求头</span><br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;   <span class="hljs-comment"># 记录真实发出请求的客户端IP</span><br><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;  <span class="hljs-comment">#记录代理信息</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>*在nginx.conf中编写配置,引入上面的conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><span class="hljs-comment"># 引入自定义配置文件</span><br><span class="hljs-attribute">include</span> leadnews.conf/<span class="hljs-regexp">*.conf</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-重新加载nginx"><a href="#4-重新加载nginx" class="headerlink" title="4.重新加载nginx"></a>4.重新加载nginx</h4><p>​进入nginx主目录,打开cmd,输入nginx -s reload</p><h4 id="5-启动nginx"><a href="#5-启动nginx" class="headerlink" title="5.启动nginx"></a>5.启动nginx</h4><p>​进入nginx主目录,打开cmd,输入nginx</p><h4 id="6-打开前端"><a href="#6-打开前端" class="headerlink" title="6.打开前端"></a>6.打开前端</h4>]]></content>
    
    
    
    <tags>
      
      <tag>社区项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo创建文章流程</title>
    <link href="/2024/05/27/Hexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/05/27/Hexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>进入blog根目录,打开cmd</p><p>1.npx hexo new “文章标题”</p><p>2.hexo g &amp;&amp; hexo d</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM虚拟机-1-初始</title>
    <link href="/2024/05/21/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA-1-%E5%88%9D%E5%A7%8B/"/>
    <url>/2024/05/21/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA-1-%E5%88%9D%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="JVM虚拟机"><a href="#JVM虚拟机" class="headerlink" title="JVM虚拟机"></a>JVM虚拟机</h4><p>java virtual machine</p><p><strong>构成</strong>:类加载器,运行时数据区,垃圾回收器…</p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统的特征发展,中断</title>
    <link href="/2024/05/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81%E5%8F%91%E5%B1%95-%E4%B8%AD%E6%96%AD/"/>
    <url>/2024/05/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81%E5%8F%91%E5%B1%95-%E4%B8%AD%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h4 id="操作系统特征-四大特征"><a href="#操作系统特征-四大特征" class="headerlink" title="操作系统特征 - 四大特征"></a>操作系统特征 - 四大特征</h4><p>并发,共享,虚拟,异步</p><p><strong>并发</strong>:多个事务在一个时间段内,宏观上同时运行,微观上交替运行</p><p><strong>共享</strong>:系统中的资源可供内存多个并发执行的进程共同使用</p><p>分为:互斥共享(一个进程霸占使用)&#x2F;同时共享(多个进程交替使用)</p><p><strong>虚拟</strong>:把物理上的实体变为逻辑上的对应物</p><p>虚拟技术:空分复用技术(虚拟存储技术),时分复用技术(虚拟处理器)等</p><p><strong>异步</strong>:多道程序环境,由于资源有限,某个进程可能会等待资源释放再运行,称为异步</p><h4 id="操作系统的发展"><a href="#操作系统的发展" class="headerlink" title="操作系统的发展"></a>操作系统的发展</h4><h5 id="1-手工操作阶段"><a href="#1-手工操作阶段" class="headerlink" title="1.手工操作阶段"></a>1.手工操作阶段</h5><p><img src="/myimg/image-20240521175008727.png" alt="image-20240521175008727"></p><h5 id="2-单道批处理"><a href="#2-单道批处理" class="headerlink" title="2.单道批处理"></a>2.单道批处理</h5><p><img src="/myimg/image-20240521175403207.png" alt="image-20240521175403207"></p><p>将多个作业写入磁带,脱机输入</p><p><img src="/myimg/image-20240521175418817.png" alt="image-20240521175418817"></p><p>单个作业仍然独占计算机</p><h5 id="3-多道批处理"><a href="#3-多道批处理" class="headerlink" title="3.多道批处理"></a>3.多道批处理</h5><p><img src="/myimg/image-20240521175607890.png" alt="image-20240521175607890"></p><p>优点:多道程序并发执行,资源利用率大幅提升,如:在cpu计算时,可以同时进行读写操作</p><p>缺点:用户提交作业,用户就无法操作作业,只能等待计算机运行结束</p><h5 id="4-分时操作系统"><a href="#4-分时操作系统" class="headerlink" title="4.分时操作系统"></a>4.分时操作系统</h5><p><img src="/myimg/image-20240521175902023.png" alt="image-20240521175902023"></p><p>优点:多个用户轮流使用计算机资源,用户请求可以立即被响应,解决了人机交互问题</p><p>缺点:不能优先处理紧急作业,只能按时间轮询</p><h5 id="5-实时操作系统"><a href="#5-实时操作系统" class="headerlink" title="5.实时操作系统"></a>5.实时操作系统</h5><p>优点:能够响应一些紧急任务,可以有严格的时间限制</p><h5 id="6-网络操作系统-分布式操作系统-个人计算机操作系统…"><a href="#6-网络操作系统-分布式操作系统-个人计算机操作系统…" class="headerlink" title="6.网络操作系统,分布式操作系统,个人计算机操作系统…"></a>6.网络操作系统,分布式操作系统,个人计算机操作系统…</h5><h4 id="操作系统运行机制"><a href="#操作系统运行机制" class="headerlink" title="操作系统运行机制"></a>操作系统运行机制</h4><p><strong>内核态</strong>,内核程序:kernel,可以执行特权指令,接近硬件</p><p><strong>用户态</strong>,应用程序:只能使用非特权指令,接近用户</p><p>cpu有一个寄存器 <strong>程序状态寄存器</strong>(psw) ,标志cpu处于哪种状态</p><p><strong>运行流程</strong>:</p><p>1.刚开机处于 内核态 ,操作系统运行<strong>内核</strong>程序</p><p>2.当用户启动一个应用程序,内核程序让出cpu,psw切换为用户态</p><p>如果在<strong>用户态运行特权指令</strong></p><p>3.发生 <strong>中断信号</strong>,cpu直接转为内核态</p><p>4.处理中断,再分配cpu</p><h4 id="中断-异常"><a href="#中断-异常" class="headerlink" title="中断&amp;异常"></a>中断&amp;异常</h4><p><strong>中断向量表</strong>,找到相应类型的中断处理程序</p><h5 id="中断"><a href="#中断" class="headerlink" title="中断:"></a><strong>中断</strong>:</h5><p>中断是让 操作系统 内核重新夺回cpu运行权的<strong>唯一途径</strong></p><p>1.<strong>内中断</strong>:中断信号来源于cpu内部</p><p>如:用户态执行特权处理,除数为0…<strong>非法指令</strong>,会直接产生内中断</p><p>如:应用程序<strong>主动请求</strong>(调用系统资源)操作系统<strong>内核服务</strong>(陷入指令),也会产生内中断</p><p>2.<strong>外中断</strong>:</p><p>如:时钟中断,时钟部件<strong>控制</strong>各个进程的<strong>运行时间</strong>,会按照固定时间发出中断信号</p><p>如:系统资源(打印机等),处理<strong>IO中断的内核程序</strong>,在输入输出任务完成时,向cpu发送中断信号</p><h5 id="异常-指内中断"><a href="#异常-指内中断" class="headerlink" title="异常:指内中断"></a>异常:指内中断</h5><p>陷入,故障,终止</p><p><strong>陷入</strong>:应用程序故意引发</p><p><strong>故障</strong>:可被内核程序修复,cpu修复后仍然会给应用程序使用权</p><p><strong>终止</strong>:致命错误,内核程序无法修复,不会再给使用权</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社区项目-day01</title>
    <link href="/2024/05/21/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-day01/"/>
    <url>/2024/05/21/%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE-day01/</url>
    
    <content type="html"><![CDATA[<h3 id="核心界面"><a href="#核心界面" class="headerlink" title="核心界面:"></a>核心界面:</h3><h5 id="1-前台文章展示-普通用户"><a href="#1-前台文章展示-普通用户" class="headerlink" title="1.前台文章展示 - 普通用户"></a>1.前台文章展示 - 普通用户</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">基于安卓<span class="hljs-keyword">app</span> - 后改微信小程序<br></code></pre></td></tr></table></figure><h5 id="2-后台文章管理-自媒体博主"><a href="#2-后台文章管理-自媒体博主" class="headerlink" title="2.后台文章管理 - 自媒体博主"></a>2.后台文章管理 - 自媒体博主</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">基于vue网页<br></code></pre></td></tr></table></figure><h5 id="3-后台超级管理员-项目维护人员"><a href="#3-后台超级管理员-项目维护人员" class="headerlink" title="3.后台超级管理员 - 项目维护人员"></a>3.后台超级管理员 - 项目维护人员</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">基于vue网页<br></code></pre></td></tr></table></figure><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构:"></a>微服务架构:</h3><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型:"></a>技术选型:</h3><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计:"></a>数据库设计:</h3>]]></content>
    
    
    
    <tags>
      
      <tag>社区项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/21/hello-world/"/>
    <url>/2024/05/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
